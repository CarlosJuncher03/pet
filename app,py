from flask import Flask, render_template, redirect, url_for, flash, request, jsonify
from flask_login import LoginManager, login_user, login_required, logout_user, UserMixin, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
from flask_mail import Mail, Message
import os
import random
import string
from conector_mysql import executar_query, inserir_dados, atualizar_dados

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['UPLOAD_FOLDER'] = 'static/img'
app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg', 'gif'}
app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = 'carlosspakyy@gmail.com'
app.config['MAIL_PASSWORD'] = 'cvxs yxfg orwg lpso'
app.config['MAIL_DEFAULT_SENDER'] = 'carlosspakyy@gmail.com'

mail = Mail(app)
login_manager = LoginManager()
login_manager.login_view = 'login'
login_manager.init_app(app)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

class User(UserMixin):
    def __init__(self, id, username, email, password, photo):
        self.id = id
        self.username = username
        self.email = email
        self.password = password
        self.photo = photo

@login_manager.user_loader
def load_user(user_id):
    query = f"SELECT * FROM users WHERE id = {user_id}"
    result = executar_query(query)
    if result:
        user = result[0]
        return User(user['id'], user['username'], user['email'], user['password'], user['photo'])
    return None

def generate_random_password(length=8):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for i in range(length))

def send_email(to_email, new_password):
    msg = Message('Nova Senha para Guarda Compartilhada de Pets', recipients=[to_email])
    msg.body = f'Sua nova senha é: {new_password}'
    try:
        mail.send(msg)
        print("Email enviado com sucesso!")
    except Exception as e:
        print(f'Erro ao enviar email: {e}')

@app.route('/', methods=['GET', 'POST'])
@app.route('/login', methods=['GET', 'POST'])
def login():
    def get_user_by_email(email):
        query = f"SELECT * FROM users WHERE email = '{email}'"
        result = executar_query(query)
        if result:
            return result[0]
        return None

    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        user = get_user_by_email(email)
        if user and check_password_hash(user['password'], password):
            user_obj = User(user['id'], user['username'], user['email'], user['password'], user['photo'])
            login_user(user_obj)
            return redirect(url_for('home'))
        else:
            flash('Login falhou. Verifique o email e a senha.', 'danger')
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        confirm_password = request.form['confirm-password']

        if password != confirm_password:
            flash('As senhas não coincidem.', 'danger')
            return redirect(url_for('register'))

        # Verificar se o email já está registrado
        email_query = f"SELECT * FROM users WHERE email = '{email}'"
        email_exists = executar_query(email_query)

        if email_exists:
            flash('Email já registrado. Por favor, use um email diferente.', 'danger')
            return redirect(url_for('register'))

        hashed_password = generate_password_hash(password, method='pbkdf2:sha256')
        query = f"INSERT INTO users (username, email, password) VALUES ('{username}', '{email}', '{hashed_password}')"
        if inserir_dados(query):
            flash('Sua conta foi criada!', 'success')
            return redirect(url_for('login'))
        else:
            flash('Erro ao criar a conta. Tente novamente.', 'danger')
    return render_template('registro.html')



@app.route('/home')
@login_required
def home():
    # Paginação de atividades
    page = request.args.get('page', 1, type=int)
    per_page = 2
    offset = (page - 1) * per_page
    activities_query = f"""
        SELECT a.*, p.name as pet_name, u.username as caregiver_name
        FROM activities a
        JOIN pets p ON a.pet_id = p.id
        JOIN users u ON a.caregiver_id = u.id
        WHERE p.user_id = {current_user.id} OR p.id IN (
            SELECT pet_id FROM shared_pets WHERE shared_with_user_id = {current_user.id} AND status = 'accepted'
        )
        ORDER BY a.start_date DESC
        LIMIT {per_page} OFFSET {offset}
    """
    total_activities_query = f"""
        SELECT COUNT(*) as total
        FROM activities a
        JOIN pets p ON a.pet_id = p.id
        WHERE p.user_id = {current_user.id} OR p.id IN (
            SELECT pet_id FROM shared_pets WHERE shared_with_user_id = {current_user.id} AND status = 'accepted'
        )
    """
    activities = executar_query(activities_query)
    total_activities_result = executar_query(total_activities_query)
    total_activities = total_activities_result[0]['total'] if total_activities_result else 0
    total_pages = (total_activities + per_page - 1) // per_page

    # Paginação de pets
    pet_page = request.args.get('pet_page', 1, type=int)
    pets_per_page = 3
    pet_offset = (pet_page - 1) * pets_per_page
    pets_query = f"""
        SELECT p.*
        FROM pets p
        LEFT JOIN shared_pets sp ON p.id = sp.pet_id
        WHERE p.user_id = {current_user.id} OR (sp.shared_with_user_id = {current_user.id} AND sp.status = 'accepted')
        GROUP BY p.id
        LIMIT {pets_per_page} OFFSET {pet_offset}
    """
    total_pets_query = f"""
        SELECT COUNT(DISTINCT p.id) as total
        FROM pets p
        LEFT JOIN shared_pets sp ON p.id = sp.pet_id
        WHERE p.user_id = {current_user.id} OR (sp.shared_with_user_id = {current_user.id} AND sp.status = 'accepted')
    """
    pets = executar_query(pets_query)
    total_pets_result = executar_query(total_pets_query)
    total_pets = total_pets_result[0]['total'] if total_pets_result else 0
    pet_total_pages = (total_pets + pets_per_page - 1) // pets_per_page

    return render_template('home.html',
                           activities=activities,
                           page=page,
                           total_pages=total_pages,
                           pets=pets,
                           pet_page=pet_page,
                           pet_total_pages=pet_total_pages)


@app.route('/meus_pets')
@login_required
def meus_pets():
    filter = request.args.get('filter', '')
    page = request.args.get('page', 1, type=int)
    per_page = 3
    offset = (page - 1) * per_page

    base_query = f"""
        SELECT pets.* 
        FROM pets 
        WHERE pets.user_id = {current_user.id}
    """
    count_query = f"""
        SELECT COUNT(*) 
        FROM pets 
        WHERE pets.user_id = {current_user.id}
    """

    if filter:
        base_query += f" AND pets.name LIKE '%{filter}%'"
        count_query += f" AND pets.name LIKE '%{filter}%'"

    base_query += f" LIMIT {per_page} OFFSET {offset}"
    pets = executar_query(base_query)
    total = executar_query(count_query)[0]['COUNT(*)']

    shared_query = f"""
        SELECT pets.* 
        FROM pets 
        JOIN shared_pets ON pets.id = shared_pets.pet_id
        WHERE shared_pets.shared_with_user_id = {current_user.id} AND shared_pets.status = 'accepted'
    """
    if filter:
        shared_query += f" AND pets.name LIKE '%{filter}%'"
    
    shared_pets = executar_query(shared_query)
    total_pages = (total + per_page - 1) // per_page

    return render_template('meus_pets.html', pets=pets, shared_pets=shared_pets, page=page, total_pages=total_pages, filter=filter)

@app.route('/deixar_de_cuidar/<int:pet_id>', methods=['POST'])
@login_required
def deixar_de_cuidar(pet_id):
    query = f"""
        UPDATE shared_pets
        SET status = 'rejected'
        WHERE pet_id = {pet_id} AND shared_with_user_id = {current_user.id}
    """
    if atualizar_dados(query):
        flash('Você deixou de cuidar deste pet.', 'success')
    else:
        flash('Erro ao deixar de cuidar do pet. Tente novamente.', 'danger')
    return redirect(url_for('meus_pets'))

@app.route('/add_pet', methods=['POST'])
@login_required
def add_pet():
    if 'photo' not in request.files:
        flash('Nenhum arquivo de foto foi enviado', 'danger')
        return redirect(url_for('meus_pets'))

    photo = request.files['photo']
    if photo.filename == '':
        flash('Nenhuma foto foi selecionada', 'danger')
        return redirect(url_for('meus_pets'))

    if photo and allowed_file(photo.filename):
        filename = secure_filename(photo.filename)
        photo.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))

        name = request.form['name']
        species = request.form['species']
        breed = request.form.get('breed', '')
        age = request.form.get('age', 0)
        notes = request.form.get('notes', '')

        query = f"INSERT INTO pets (user_id, name, species, breed, age, notes, photo) VALUES ({current_user.id}, '{name}', '{species}', '{breed}', {age}, '{notes}', '{filename}')"
        if inserir_dados(query):
            flash('Pet adicionado com sucesso!', 'success')
        else:
            flash('Erro ao adicionar o pet. Tente novamente.', 'danger')
    else:
        flash('Tipo de arquivo não permitido', 'danger')
    return redirect(url_for('meus_pets'))

@app.route('/edit_pet', methods=['POST'])
@login_required
def edit_pet():
    pet_id = request.form['pet_id']
    name = request.form['name']
    species = request.form['species']
    breed = request.form.get('breed', '')
    age = request.form.get('age', 0)
    notes = request.form.get('notes', '')
    photo = request.files.get('photo')

    if photo and allowed_file(photo.filename):
        filename = secure_filename(photo.filename)
        photo.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        query = f"UPDATE pets SET name='{name}', species='{species}', breed='{breed}', age={age}, notes='{notes}', photo='{filename}' WHERE id={pet_id} AND user_id={current_user.id}"
    else:
        query = f"UPDATE pets SET name='{name}', species='{species}', breed='{breed}', age={age}, notes='{notes}' WHERE id={pet_id} AND user_id={current_user.id}"

    if atualizar_dados(query):
        flash('Pet atualizado com sucesso!', 'success')
    else:
        flash('Erro ao atualizar o pet. Tente novamente.', 'danger')

    return redirect(url_for('meus_pets'))

@app.route('/delete_pet/<int:pet_id>', methods=['POST'])
@login_required
def delete_pet(pet_id):
    query = f"DELETE FROM pets WHERE id = {pet_id} AND user_id = {current_user.id}"
    if atualizar_dados(query):
        flash('Pet excluído com sucesso!', 'success')
    else:
        flash('Erro ao excluir o pet. Tente novamente.', 'danger')
    return redirect(url_for('meus_pets'))

@app.route('/perfil', methods=['GET', 'POST'])
@login_required
def perfil():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        photo = request.files.get('photo')

        query = f"UPDATE users SET username='{username}', email='{email}'"

        if password:
            hashed_password = generate_password_hash(password, method='pbkdf2:sha256')
            query += f", password='{hashed_password}'"
        
        if photo and allowed_file(photo.filename):
            filename = secure_filename(photo.filename)
            photo.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            query += f", photo='{filename}'"

        query += f" WHERE id={current_user.id}"

        if atualizar_dados(query):
            flash('Perfil atualizado com sucesso!', 'success')
        else:
            flash('Erro ao atualizar o perfil. Tente novamente.', 'danger')
        return redirect(url_for('perfil'))

    query = f"SELECT * FROM users WHERE id={current_user.id}"
    result = executar_query(query)
    user = result[0]
    return render_template('perfil.html', user=user)

@app.route('/finalize_activity/<int:activity_id>', methods=['POST'])
@login_required
def finalize_activity(activity_id):
    query = f"UPDATE activities SET status='finalizado' WHERE id={activity_id}"
    if atualizar_dados(query):
        flash('Atividade finalizada com sucesso!', 'success')
    else:
        flash('Erro ao finalizar atividade. Tente novamente.', 'danger')
    return redirect(url_for('guarda_compartilhada'))

@app.route('/update_avatar_immediate', methods=['POST'])
@login_required
def update_avatar_immediate():
    if 'photo' not in request.files:
        return jsonify({'success': False, 'message': 'Nenhuma foto enviada'})

    photo = request.files['photo']
    if photo.filename == '':
        return jsonify({'success': False, 'message': 'Nenhuma foto selecionada'})

    if photo and allowed_file(photo.filename):
        filename = secure_filename(photo.filename)
        photo.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        
        query = f"UPDATE users SET photo='{filename}' WHERE id={current_user.id}"
        if atualizar_dados(query):
            return jsonify({'success': True, 'photo': filename})
        else:
            return jsonify({'success': False, 'message': 'Erro ao atualizar o avatar'})
    else:
        return jsonify({'success': False, 'message': 'Tipo de arquivo não permitido'})

@app.route('/share_pet', methods=['POST'])
@login_required
def share_pet():
    pet_id = request.form['pet_id']
    email = request.form['email']
    
    query = f"SELECT id FROM users WHERE email='{email}'"
    result = executar_query(query)
    
    if not result:
        flash('Email não encontrado', 'danger')
        return redirect(url_for('meus_pets'))
    
    shared_with_user_id = result[0]['id']
    
    query = f"INSERT INTO shared_pets (user_id, shared_with_user_id, pet_id, status) VALUES ({current_user.id}, {shared_with_user_id}, {pet_id}, 'pending')"
    if inserir_dados(query):
        flash('Pet compartilhado com sucesso!', 'success')
    else:
        flash('Erro ao compartilhar o pet. Tente novamente.', 'danger')
    
    return redirect(url_for('meus_pets'))

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/autocomplete_email')
@login_required
def autocomplete_email():
    query = request.args.get('q', '')
    if not query:
        return jsonify([])

    query = f"SELECT email FROM users WHERE email LIKE '{query}%' LIMIT 5"
    results = executar_query(query)
    emails = [result['email'] for result in results]
    return jsonify(emails)

@app.route('/view_shares/<int:pet_id>')
@login_required
def view_shares(pet_id):
    query = f"""
    SELECT sp.id, p.name as pet_name, u.email, sp.status 
    FROM shared_pets sp
    JOIN pets p ON sp.pet_id = p.id
    JOIN users u ON sp.shared_with_user_id = u.id
    WHERE sp.pet_id = {pet_id}
    """
    shares = executar_query(query)
    return render_template('compartilhamentos.html', shares=shares)

@app.route('/inativar_compartilhamento/<int:share_id>', methods=['POST'])
@login_required
def inativar_compartilhamento(share_id):
    query = f"UPDATE shared_pets SET status = 'rejected' WHERE id = {share_id}"
    if atualizar_dados(query):
        return jsonify({'success': True})
    else:
        return jsonify({'success': False}), 500

@app.route('/guarda_compartilhada')
@login_required
def guarda_compartilhada():
    query = f"""
    SELECT a.*, p.name as pet_name, u.username as caregiver_name 
    FROM activities a
    JOIN pets p ON a.pet_id = p.id
    JOIN users u ON a.caregiver_id = u.id
    WHERE p.user_id = {current_user.id} OR a.caregiver_id = {current_user.id} OR p.id IN (
        SELECT pet_id FROM shared_pets WHERE shared_with_user_id = {current_user.id} AND status = 'accepted'
    )
    """
    activities = executar_query(query)
    
    pets_query = f"""
    SELECT p.* 
    FROM pets p
    LEFT JOIN shared_pets sp ON p.id = sp.pet_id
    WHERE p.user_id = {current_user.id} OR (sp.shared_with_user_id = {current_user.id} AND sp.status = 'accepted')
    GROUP BY p.id
    """
    pets = executar_query(pets_query)

    return render_template('guarda_compartilhada.html', activities=activities, pets=pets)

@app.route('/get_caregivers/<int:pet_id>')
@login_required
def get_caregivers(pet_id):
    query = f"""
    SELECT u.id, u.username as name 
    FROM users u
    JOIN shared_pets sp ON u.id = sp.shared_with_user_id
    WHERE sp.pet_id = {pet_id} AND sp.status = 'accepted'
    UNION
    SELECT u.id, u.username as name 
    FROM users u
    JOIN pets p ON u.id = p.user_id
    WHERE p.id = {pet_id}
    """
    caregivers = executar_query(query)
    return jsonify({'caregivers': caregivers})

@app.route('/add_activity', methods=['POST'])
@login_required
def add_activity():
    pet_id = request.form['pet_id']
    caregiver_id = request.form['caregiver_id']
    start_date = request.form['start_date']
    end_date = request.form['end_date']
    notes = request.form['notes']

    query = f"""
    INSERT INTO activities (pet_id, caregiver_id, start_date, end_date, notes)
    VALUES ({pet_id}, {caregiver_id}, '{start_date}', '{end_date}', '{notes}')
    """
    if inserir_dados(query):
        flash('Atividade adicionada com sucesso!', 'success')
    else:
        flash('Erro ao adicionar atividade. Tente novamente.', 'danger')
    
    return redirect(url_for('guarda_compartilhada'))

@app.route('/edit_activity', methods=['POST'])
@login_required
def edit_activity():
    activity_id = request.form['activity_id']
    pet_id = request.form['pet_id']
    caregiver_id = request.form['caregiver_id']
    start_date = request.form['start_date']
    end_date = request.form['end_date']
    notes = request.form['notes']

    query = f"""
    UPDATE activities 
    SET pet_id = {pet_id}, caregiver_id = {caregiver_id}, start_date = '{start_date}', end_date = '{end_date}', notes = '{notes}'
    WHERE id = {activity_id}
    """
    if atualizar_dados(query):
        flash('Atividade atualizada com sucesso!', 'success')
    else:
        flash('Erro ao atualizar atividade. Tente novamente.', 'danger')
    
    return redirect(url_for('guarda_compartilhada'))

@app.route('/delete_activity/<int:activity_id>', methods=['POST'])
@login_required
def delete_activity(activity_id):
    query = f"DELETE FROM activities WHERE id = {activity_id}"
    if atualizar_dados(query):
        flash('Atividade excluída com sucesso!', 'success')
    else:
        flash('Erro ao excluir atividade. Tente novamente.', 'danger')
    return redirect(url_for('guarda_compartilhada'))

@app.route('/compartilhamentos')
@login_required
def compartilhamentos():
    query = f"""
    SELECT sp.id, sp.user_id, p.name as pet_name, u.email as owner_email, sp.status 
    FROM shared_pets sp
    JOIN pets p ON sp.pet_id = p.id
    JOIN users u ON sp.user_id = u.id
    WHERE sp.shared_with_user_id = {current_user.id}
    """
    shares = executar_query(query)
    return render_template('compartilhamentos_comigo.html', shares=shares)

@app.route('/accept_share/<int:share_id>', methods=['POST'])
@login_required
def accept_share(share_id):
    query = f"UPDATE shared_pets SET status='accepted' WHERE id={share_id} AND shared_with_user_id={current_user.id}"
    if atualizar_dados(query):
        flash('Compartilhamento aceito!', 'success')
    else:
        flash('Erro ao aceitar o compartilhamento. Tente novamente.', 'danger')
    return redirect(url_for('compartilhamentos'))

@app.route('/reject_share/<int:share_id>', methods=['POST'])
@login_required
def reject_share(share_id):
    query = f"UPDATE shared_pets SET status='rejected' WHERE id={share_id} AND shared_with_user_id={current_user.id}"
    if atualizar_dados(query):
        flash('Compartilhamento rejeitado!', 'success')
    else:
        flash('Erro ao rejeitar o compartilhamento. Tente novamente.', 'danger')
    return redirect(url_for('compartilhamentos'))

@app.route('/forgot_password', methods=['POST'])
def forgot_password():
    email = request.form['email']
    query = f"SELECT * FROM users WHERE email = '{email}'"
    user = executar_query(query)
    if user:
        new_password = generate_random_password()
        hashed_password = generate_password_hash(new_password, method='pbkdf2:sha256')
        update_query = f"UPDATE users SET password = '{hashed_password}' WHERE email = '{email}'"
        if atualizar_dados(update_query):
            send_email(email, new_password)
            flash('Nova senha enviada para seu email.', 'success')
        else:
            flash('Erro ao atualizar a senha. Tente novamente.', 'danger')
    else:
        flash('Email não encontrado.', 'danger')
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)
